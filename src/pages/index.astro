---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import BlogPost from "../components/BlogPost.astro";

// Fetch, sort, and format pubDate
const recentPosts = (await getCollection("blog"))
  .sort(
    (a, b) =>
      new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime(),
  )
  .slice(0, 3)
  .map((post) => ({
    ...post,
    formattedDate: new Date(post.data.pubDate).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }),
  }));
---

<BaseLayout>
  <!-- Typewriter heading -->
  <h1 id="typedtext" class="typewriter"></h1>

  <div class="bubble">
    <p>
      My blog post is written using the popular web framework
      <a href="https://astro.build/" target="_blank" rel="noopener noreferrer"
        >Astro</a
      >
      and styled with the popular Neovim color theme
      <a
        href="https://github.com/rebelot/kanagawa.nvim"
        target="_blank"
        rel="noopener noreferrer"
        class="default-link">Kanagawa</a
      >
      in the Dragon flavor.
    </p>
  </div>

  <h2 class="underl">Me:</h2>
  <p class="justified">
    I mostly write about AI and related technologies like Machine Learning,
    Natural Language Processing, and Deep Learning — you get the idea.
  </p>
  <p class="justified">
    I'm also a strong proponent of Linux and open-source software, as well as
    developer efficiency and the tools that support it. So don’t be surprised if
    you come across posts about those or general computer science topics as
    well.
  </p>

  <h2 class="underl">Latest Blog Posts:</h2>

  <!-- Render top 3 recent posts -->
  {
    recentPosts.map((post) => (
      <BlogPost
        url={`/posts/${post.id}/`}
        title={post.data.title}
        image={post.data.image}
        pubDate={post.formattedDate}
        description={post.data.description}
      />
    ))
  }

  <!-- typewriter -->
  <script>
    const aText = ["Hi, welcome at Xyroton!"];
    const iSpeed = 80;

    let iIndex = 0; // Which string in aText is being typed, for multi line with ,
    let iTextPos = 0; // which charcter of the current line is typed.
    let sContents = ""; // All the lines typed so far (fully typed), used for multiline support. ul
    let iRow; // Helper to manage which rows are visible (used for scrolling effect) (not used to few lines) ul
    let iArrLength = aText[0].length; // Length of the current string / lines
    const iScrollAt = 20; // Max lines before scrolling logic kicks in (not really needed for 1 line) ul

    // add one letter at a time
    function typewriter() {
      sContents = "";
      iRow = Math.max(0, iIndex - iScrollAt);
      // grab HTML element where the text will appear
      const destination = document.getElementById("typedtext");

      while (iRow < iIndex) {
        sContents += aText[iRow++] + "<br />";
      }

      // set HTML
      destination.innerHTML =
        sContents +
        aText[iIndex].substring(0, iTextPos) +
        '<span class="blinking-cursor">_</span>';

      if (iTextPos++ === iArrLength) {
        iTextPos = 0;
        iIndex++;
        if (iIndex < aText.length) {
          iArrLength = aText[iIndex].length;
          setTimeout(typewriter, 500);
        }
      } else {
        setTimeout(typewriter, iSpeed);
      }
    }

    if (typeof window !== "undefined") {
      window.addEventListener("DOMContentLoaded", typewriter);
    }
  </script>
</BaseLayout>
