---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import PostCard from "../components/PostCard.astro";

// Fetch, sort, and format pubDate
const recentPosts = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort(
    (a, b) =>
      new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime(),
  )
  .slice(0, 3)
  .map((post) => ({
    ...post,
    formattedDate: new Date(post.data.pubDate).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }),
  }));
---

<BaseLayout>
  <div class="animate-on-load">
    <!-- Typewriter heading -->
    <div class="monitor-frame">
      <div class="terminal-screen">
        <h1 id="typedtext" class="typewriter"></h1>
      </div>
    </div>

    <div class="bubble">
      <p>
        My blog is written with <a
          href="https://astro.build/"
          target="_blank"
          rel="noopener noreferrer">Astro</a
        >
        and styled using the objectively best Neovim color theme,
        <a
          href="https://github.com/rebelot/kanagawa.nvim"
          target="_blank"
          rel="noopener noreferrer"
          class="default-link">Kanagawa</a
        >, in the Dragon flavor.
      </p>
    </div>

    <h2 class="underlined-heading">Xyroton</h2>
    <p class="justified">
      I mostly write about AI and related technologies like Machine Learning,
      Natural Language Processing, and Deep Learning — you get the idea.
    </p>
    <p class="justified">
      I'm also a strong proponent of Linux and open-source software, as well as
      developer efficiency and the tools that support it. If any of those things
      interest you, feel free to drop by whenever you like.
    </p>

    <div id="rss-copy-container" class="my-rss">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-rss-icon lucide-rss"
        ><path d="M4 11a9 9 0 0 1 9 9"></path><path d="M4 4a16 16 0 0 1 16 16"
        ></path><circle cx="5" cy="19" r="1"></circle></svg
      >
      <p>Get RSS Feed</p>
    </div>

    <h2 class="underlined-heading">Latest Blog Posts</h2>

    <div class="post-container">
      {
        recentPosts.map((post) => (
          <div class="post-card-wrapper">
            <PostCard
              url={`/posts/${post.id}/`}
              title={post.data.title}
              image={post.data.image}
              pubDate={post.formattedDate}
              description={post.data.description}
              tags={post.data.tags}
              content={post.body}
            />
          </div>
        ))
      }
    </div>
  </div>

  <!-- typewriter -->
  <script>
    const aText = [
      "Hi, welcome to Xyroton!",
      "嗨，欢迎来到 Xyroton！",
      "Hallo, willkommen bei Xyroton!",
      "Xyrotonへようこそ！", // Japanese
      "¡Hola, bienvenido a Xyroton!", // spanish
      "Bonjour, bienvenue à Xyroton!", // french
      "Ciao, benvenuto a Xyroton!", // italian
    ];
    const iSpeed = 80;
    const delayBetween = 3000;

    let i = 0;
    let char = 0;
    let typewriterTimeout;

    function typewriter() {
      const element = document.getElementById("typedtext");
      if (!element) return;

      element.innerHTML =
        aText[i].slice(0, char++) + '<span class="blinking-cursor">_</span>';

      if (char <= aText[i].length) {
        typewriterTimeout = setTimeout(typewriter, iSpeed);
      } else {
        typewriterTimeout = setTimeout(() => {
          char = 0;
          i++;
          if (i >= aText.length) i = 0;
          element.innerHTML = "";
          typewriter();
        }, delayBetween);
      }
    }

    function initTypewriter() {
      clearTimeout(typewriterTimeout);
      i = 0;
      char = 0;
      typewriter();
    }

    document.addEventListener("DOMContentLoaded", initTypewriter);
    initTypewriter(); // Also run on initial load

    // RSS copy to clipboard functionality
    const rssCopyContainer = document.getElementById("rss-copy-container");
    if (rssCopyContainer) {
      rssCopyContainer.addEventListener("click", async () => {
        const rssLink = `${window.location.origin}/rss.xml`;
        try {
          await navigator.clipboard.writeText(rssLink);
          alert("RSS link copied to clipboard!");
        } catch (err) {
          console.error("Failed to copy RSS link: ", err);
          alert("Failed to copy RSS link. Please copy it manually: " + rssLink);
        }
      });
    }
  </script>
</BaseLayout>

<style>
  .my-rss {
    background-color: var(--mode-button-bg);
    color: var(--background-color);
    border-radius: 5px;
    width: 80%; /* Set width to 80% of parent */
    max-width: 400px; /* Keep max-width for larger screens */
    margin: 20px auto; /* Center the div horizontally */
    display: flex;
    align-items: center; /* Center vertically */
    justify-content: center; /* Center horizontally */
    gap: 10px; /* Space between icon and text */
    padding: 10px 20px; /* Add some padding */
    cursor: pointer; /* Indicate it's clickable */
    transition: transform 0.3s ease; /* Add transition for smooth effect */
  }

  .my-rss:hover {
    transform: scale(1.05); /* Zoom effect on hover */
  }

  .my-rss p {
    margin: 0; /* Remove default paragraph margin */
    font-family: "JetBrains Mono", monospace;
    font-weight: normal;
  }
</style>
