---
import TOC from "./TOC.astro";
import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;
---

<div class="mobile-toc-container">
  <button id="mobile-toc-toggle" aria-label="Toggle Table of Contents">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="lucide lucide-table-of-contents-icon lucide-table-of-contents"
      ><path d="M16 12H3"></path><path d="M16 18H3"></path><path d="M16 6H3"
      ></path><path d="M21 12h.01"></path><path d="M21 18h.01"></path><path
        d="M21 6h.01"></path></svg
    >
  </button>

  <div class="mobile-toc-dropdown">
    <TOC headings={headings} />
  </div>
</div>

<script is:inline>
  const mobileTocToggle = document.getElementById("mobile-toc-toggle");
  const mobileTocDropdown = document.querySelector(".mobile-toc-dropdown");

  if (mobileTocToggle && mobileTocDropdown) {
    mobileTocToggle.addEventListener("click", () => {
      mobileTocDropdown.classList.toggle("active");
    });

    document.addEventListener("click", (event) => {
      if (
        !mobileTocDropdown.contains(event.target) &&
        !mobileTocToggle.contains(event.target) &&
        mobileTocDropdown.classList.contains("active")
      ) {
        mobileTocDropdown.classList.remove("active");
      }
    });

    // Close dropdown when a link inside it is clicked
    mobileTocDropdown.addEventListener("click", (event) => {
      if (event.target.tagName === "A") {
        mobileTocDropdown.classList.remove("active");
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const mobileTocContainer = document.querySelector(".mobile-toc-container");
    const tagWrapper = document.querySelector(".tag-wrapper");

    if (mobileTocContainer && tagWrapper) {
      const mobileTocHeight = mobileTocContainer.offsetHeight;
      const initialBottomOffset = 20; // From CSS: bottom: 20px;

      function adjustMobileTocPosition() {
        const viewportHeight = window.innerHeight;
        const tagWrapperTopInDocument =
          tagWrapper.getBoundingClientRect().top + window.scrollY; // Get absolute top position

        // Calculate the scroll position where the bottom of the fixed TOC
        // would align with the top of the tagWrapper.
        // When fixed, the bottom of the TOC is at (viewportHeight - initialBottomOffset) from the top of the viewport.
        // We want this to be equal to tagWrapperTopInDocument.
        // So, window.scrollY + (viewportHeight - initialBottomOffset) = tagWrapperTopInDocument
        // window.scrollY = tagWrapperTopInDocument - (viewportHeight - initialBottomOffset)
        const stopScrollY =
          tagWrapperTopInDocument - (viewportHeight - initialBottomOffset);

        if (window.scrollY >= stopScrollY) {
          mobileTocContainer.classList.add("hidden-by-scroll");
        } else {
          mobileTocContainer.classList.remove("hidden-by-scroll");
        }
      }

      window.addEventListener("scroll", adjustMobileTocPosition);
      adjustMobileTocPosition(); // Call on load to set initial position
    }
  });
</script>

<style>
  .mobile-toc-container {
    display: none; /* Hidden by default, shown on mobile */
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 9999; /* Increased z-index to ensure it's on top */
    transition:
      transform 0.3s ease,
      opacity 0.3s ease,
      visibility 0.3s ease; /* Add transform transition */
  }

  .mobile-toc-container button {
    background-color: transparent; /* Make background transparent */
    color: var(--mode-button-bg); /* Use mode-button-bg for icon color */
    border: 1px solid var(--hamburger-border); /* Add border from header dropdown */
    border-radius: 50%;
    width: 50px;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    box-shadow: var(--box-shadow);
    backdrop-filter: blur(10px); /* Add blur effect */
    -webkit-backdrop-filter: blur(10px); /* For Safari support */
  }

  .mobile-toc-container button .icon {
    width: 24px;
    height: 24px;
  }

  .mobile-toc-dropdown {
    position: absolute;
    bottom: 60px; /* Above the button */
    right: 0;
    background-color: var(--tocy);
    width: 250px; /* Adjust as needed */
    max-width: calc(100vw - 40px); /* Ensure it doesn't overflow viewport */
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition:
      opacity 0.3s ease,
      transform 0.3s ease,
      visibility 0.3s ease,
      max-height 0.3s ease;
    flex-direction: column;
    /* Removed padding from here */
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    max-height: 0; /* Start collapsed */
    overflow: hidden;
    border: 1px solid var(--hamburger-border);
  }

  .mobile-toc-dropdown.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    max-height: calc(100vh - 150px); /* Expand to max height, leaving space at top and bottom */
    display: flex; /* Keep display flex for layout */
  }

  /* Adjust TOC styling within the mobile dropdown */
  .mobile-toc-dropdown .toc {
    padding: 0; /* Remove padding from TOC component */
    border: none; /* Remove border from TOC component */
    background-color: var(--tocy); /* Make TOC background match dropdown */
    box-shadow: none; /* Remove shadow from TOC component */
    max-height: none; /* Allow TOC to take full height of dropdown */
    overflow-y: visible; /* Allow dropdown to handle scrolling */
    border-radius: 8px; /* Match dropdown's border-radius */
  }

  .mobile-toc-dropdown .toc ul {
    list-style: none;
    padding: 0.5rem 0; /* Added padding here */
    margin: 0;
  }

  .mobile-toc-dropdown .toc li {
    list-style: none;
    padding: 0.5rem 1rem;
    margin-bottom: 0; /* Remove margin from TOC li */
  }

  .mobile-toc-dropdown .toc a {
    text-decoration: none;
    color: var(--text-color);
    display: block;
    padding: 0.5rem; /* Match nav link padding */
    transition: none; /* Remove TOC's hover transition */
  }

  .mobile-toc-dropdown .toc a:hover {
    background: var(--drop-menu-highlight);
    border-radius: 4px;
    color: var(--text-color); /* Ensure text color doesn't change on hover */
  }

  /* Show on screens smaller than 900px (matching MarkdownPostLayout's media query) */
  .hidden-by-scroll {
    opacity: 0 !important;
    visibility: hidden !important;
    transform: translateX(100%) !important; /* Slide out to the right */
  }

  @media (max-width: 1400px) {
    .mobile-toc-container {
      display: block;
      right: max(40px, calc(50vw - 400px)); /* Adjusted for more clearance */
      left: auto; /* Ensure left is not set */
    }
  }

  @media (max-width: 600px) {
    .mobile-toc-container {
      /* Reset to default for smaller screens */
      right: 20px;
      left: auto;
    }
  }
</style>
