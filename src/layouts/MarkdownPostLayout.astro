---
import BaseLayout from "./BaseLayout.astro";
import FormattedDate from "../components/FormattedDate.astro";
import type { MarkdownHeading } from "astro";

interface Props {
  frontmatter: Record<string, any>;
  headings?: MarkdownHeading[];
}

const { frontmatter, headings } = Astro.props;
---

<BaseLayout title={frontmatter.title}>
  <div class="blog-post-container-wrapper">
    <div class="blog-post-container">
      <div class="tag-wrapper">
        TAGS:
        {
          frontmatter.tags.map((tag: string, i: number) => (
            <span class="tag">
              {tag.toUpperCase()}
              {i !== frontmatter.tags.length - 1 ? ", " : ""}
            </span>
          ))
        }
      </div>
      <h1 class="post-title">{frontmatter.title}</h1>

      <div class="intro">
        <div class="me">
          <img src="/icons/logo_dark.svg" alt="" class="me-dark" />
          <img src="/icons/logo_light.svg" alt="" class="me-light" />
        </div>
        <div class="me-info">
          <p class="me-name">Xyroton</p>
          <div class="me-date">
            <FormattedDate date={frontmatter.pubDate} />
            {
              frontmatter.updatedDate && (
                <>
                  <span class="dot">Â·</span>
                  <span class="edit">Updated:</span>
                  <span class="edit">
                    <FormattedDate
                      date={frontmatter.updatedDate}
                      format="long"
                    />
                  </span>
                </>
              )
            }
          </div>
        </div>
      </div>

      <div class="hero-image">
        {
          frontmatter.image.url && (
            <img src={frontmatter.image.url} alt={frontmatter.image.alt} />
          )
        }
      </div>
      <div class="blog-content">
        <slot />
      </div>
    </div>
  </div>

  <!-- GDPR-Compliant Giscus Integration -->
  <div class="comment-section">
    <button id="load-comments" class="btn">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="comment-icon"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path
          d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
        ></path>
        <path d="M7 11h10"></path>
        <path d="M7 15h6"></path>
        <path d="M7 7h8"></path>
      </svg>
      <span>Load Comments</span>
    </button>
    <p class="comment-consent-note">
      Comments are powered by Giscus, which may load third-party cookies. By
      clicking "Load Comments", you agree to GitHub's
      <a
        href="https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement"
        target="_blank"
        rel="noopener noreferrer">Privacy Policy</a
      >.
    </p>
  </div>

  <script is:inline>
    function loadGiscus() {
      if (document.querySelector("iframe.giscus-frame")) return;

      const script = document.createElement("script");
      script.src = "https://giscus.app/client.js";
      script.async = true;
      script.crossOrigin = "anonymous";
      script.setAttribute("data-repo", "xyroton/xyroton.github.io");
      script.setAttribute("data-repo-id", "R_kgDOO0t3rg");
      script.setAttribute("data-category", "Blog Comments");
      script.setAttribute("data-category-id", "DIC_kwDOO0t3rs4CsPmf");
      script.setAttribute("data-mapping", "pathname");
      script.setAttribute("data-strict", "0");
      script.setAttribute("data-reactions-enabled", "1");
      script.setAttribute("data-emit-metadata", "0");
      script.setAttribute("data-input-position", "bottom");
      script.setAttribute("data-lang", "en");
      script.setAttribute(
        "data-theme",
        document.documentElement.getAttribute("theme") === "light"
          ? "light"
          : "dark",
      );

      document.querySelector(".comment-section").appendChild(script);
      document.getElementById("load-comments")?.remove();
      document.querySelector(".comment-consent-note")?.remove();
    }

    if (localStorage.getItem("giscus-consent") === "true") {
      loadGiscus();
    } else {
      document
        .getElementById("load-comments")
        ?.addEventListener("click", () => {
          localStorage.setItem("giscus-consent", "true");
          loadGiscus();
        });
    }

    new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.attributeName === "theme") {
          const giscusFrame = document.querySelector("iframe.giscus-frame");
          if (giscusFrame?.contentWindow) {
            giscusFrame.contentWindow.postMessage(
              {
                giscus: {
                  setConfig: {
                    theme:
                      document.documentElement.getAttribute("theme") === "light"
                        ? "light"
                        : "dark",
                  },
                },
              },
              "https://giscus.app",
            );
          }
        }
      }
    }).observe(document.documentElement, { attributes: true });
  </script>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      const blogPostContainer = document.querySelector(".blog-post-container");
      if (!blogPostContainer) return;

      blogPostContainer.querySelectorAll("a").forEach((link) => {
        if (
          !link.hasAttribute("target") &&
          link.href &&
          !link.href.startsWith("#") &&
          !link.href.startsWith(window.location.origin)
        ) {
          link.setAttribute("target", "_blank");
          link.setAttribute("rel", "noopener noreferrer");
        }
      });
    });
  </script>
</BaseLayout>

<style>
  .edit {
    font-style: italic;
  }

  .intro {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  .me-info {
    display: flex;
    flex-direction: column;
    justify-content: center;
    line-height: 1.3;
    padding-bottom: 0.4rem;
  }

  .me-name {
    font-family: "Inter-SemiBold";
    font-size: 1rem;
    margin: 0;
  }

  .me-date {
    font-size: 0.8rem;
    color: var(--text-muted);
    margin: 0;
  }

  .me-light,
  .me-dark {
    width: 100%;
    height: 100%;
    object-fit: contain;
    display: none;
  }

  html[theme="light"] .me-light {
    display: block;
  }

  html[theme="dark"] .me-dark {
    display: block;
  }

  .me {
    background-color: var(--bg-light);
    width: 45px;
    height: 45px;
    padding: 4px;
    border-radius: 50px;
    border: 1px solid var(--bg-extra-light);
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 10px;
  }

  .blog-post-container {
    margin: auto;
    max-width: 700px;
  }

  .syde {
    width: 300px;
    position: sticky;
    top: 100px;
    align-self: flex-start;
    float: none;
    flex-shrink: 0;
  }

  .comment-section {
    max-width: 720px;
    margin: 0 auto;
    border-radius: 5px;
    margin-top: 50px;
    background-color: var(--bg);
    text-align: center;
  }

  .btn {
    background-color: var(--secondary);
    color: white;
    border: none;
    padding: 0.6rem 1.2rem;
    font-size: 1rem;
    font-family: "Inter-SemiBold";
    cursor: pointer;
    border-radius: 5px;
    transition: background-color 0.2s ease;

    /* Flex to center icon + text */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem; /* space between icon and text */
    text-align: center;
  }

  .btn svg.comment-icon {
    vertical-align: middle;
  }

  .btn:hover {
    background-color: var(--secondary-active, #333);
  }

  .comment-consent-note {
    font-size: 0.85rem;
    color: var(--text-muted);
    margin-top: 0.75rem;
  }

  .comment-consent-note a {
    color: var(--secondary);
    text-decoration: underline;
  }

  .post-title {
    font-size: 2.5rem;
    line-height: 1.1;
    font-weight: bold;
    margin-bottom: 0.9rem;
    font-family: "Inter-ExtraBold";
  }

  .tag-wrapper {
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
    font-family: "Inter-SemiBold";
    font-size: 0.7rem;
  }

  .tag {
    display: inline-flex;
    align-items: center;
    color: var(--secondary);
    gap: 0.2em;
  }

  .hero-image img {
    display: block;
    margin: 0 auto;
    max-width: 100%;
    height: auto;
    border-radius: 10px;
    box-shadow: var(--box-shadow);
    margin-top: 2rem;
    margin-bottom: 3rem;
  }
</style>
